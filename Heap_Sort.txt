// Source Code
#include <iostream>
#include <fstream>
#include <algorithm>

using namespace std;

// Max heapify function
void max_heapify(int *arr, int i, int &heapsize, int &comparisons)
{
    int l = 2 * i, r = 2 * i + 1, largest;
    if (l < heapsize && comparisons++ && arr[l] > arr[i])
    {
        largest = l;
    }

    if (r < heapsize && comparisons++ && arr[r] > arr[largest])
    {
        largest = r;
    }

    if (largest != i)
    {
        swap(arr[i], arr[largest]);
        max_heapify(arr, largest, heapsize, comparisons);
    }
}

// function to build max heap
void build_max_heap(int *arr, int len, int &heapsize, int &comparisons)
{
    int i;
    for (i = len / 2; i >= 0; i--)
    {
        max_heapify(arr, i, heapsize, comparisons);
    }
}

// Heap Sort function
void Heap_Sort(int *arr, int len, int &heapsize, int &comparisons)
{
    int i;
    build_max_heap(arr, len, heapsize, comparisons);
    for (i = len - 1; i >= 1; i--)
    {
        swap(arr[0], arr[i]);
        heapsize = heapsize - 1;
        max_heapify(arr, 0, heapsize, comparisons);
    }
}

// function to generate random array
void generate_random_array(int Arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        Arr[i] = rand() % 1000;
    }
}

// Worst Case heap
void heap_worst_case(int num_cases = 20, int min_size = 30, int max_size = 500)
{
    int interval = (max_size - min_size) / num_cases;
    for (int size = min_size, i = 0; i < num_cases; i++, size += interval)
    {
        int *Arr = new int[size];
        generate_random_array(Arr, size);
        // sort the array
        sort(Arr, Arr + size);
        fstream fout1;
        int comparisons = 0, heapsize = size;
        Heap_Sort(Arr, size, heapsize, comparisons);

        fout1.open("HeapSort_WorstCase.csv", ios::out | ios::app);
        fout1 << size << "," << comparisons << endl;
    }
}

// Best case heap
void heap_best_case(int num_cases = 20, int min_size = 30, int max_size = 500)
{
    int interval = (max_size - min_size) / num_cases;
    for (int size = min_size, i = 0; i < num_cases; i++, size += interval)
    {
        int *Arr = new int[size];
        generate_random_array(Arr, size);
        // sort the array
        sort(Arr, Arr + size, greater<int>());
        fstream fout1;
        int comparisons = 0, heapsize = size;
        Heap_Sort(Arr, size, heapsize, comparisons);

        fout1.open("HeapSort_BestCase.csv", ios::out | ios::app);
        fout1 << size << "," << comparisons << endl;
    }
}

// Average case heap
void heap_avg_case(int num_cases = 60, int min_size = 30, int max_size = 1000)
{

    int interval = (max_size - min_size) / num_cases;
    for (int size = min_size, i = 0; i < num_cases; i++, size += interval)
    {
        int *Arr = new int[size];
        generate_random_array(Arr, size);

        fstream fout1;
        int comparisons = 0, heapsize = size;
        Heap_Sort(Arr, size, heapsize, comparisons);

        fout1.open("HeapSort_AverageCase.csv", ios::out | ios::app);
        fout1 << size << "," << comparisons << endl;
    }
}

// Main Function (Driver Code)
int main()
{

    int choice;
    do
    {
        cout << "\n====================================================";
        cout << "\n***********WELCOME TO HEAP SORT PROGRAM*************";
        cout << "\n====================================================\n";
        cout << "(1) Best case\n";
        cout << "(2) Average case\n";
        cout << "(3) Worst case\n";
        cout << "(4) Exit()\n";
        cout << "Enter choice : ";
        cin >> choice;
        switch (choice)
        {
        case 1:
            heap_best_case();
            break;
        case 2:
            heap_avg_case();
            break;
        case 3:
            heap_worst_case();
            break;
        case 4:
            cout << "\n THANK YOU !!\n";
            break;
        default:
            cout << "\nINVALID CHOICE !!\n";
            break;
        }

    } while (choice != 4);
    return 0;
}