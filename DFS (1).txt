#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class GRAPH
{
	int nov;	//No of vertices
	vector<int> *myContainer;	//Adjancency List to Store edges
    bool *Visited;//To kept record of already Visited vertices

	public:
		GRAPH(int v)	//Constructor
	{
		nov = v;
		myContainer = new vector < int>[nov];
        Visited= new bool[nov];

	}

	void AddEdge(int i, int el)	//Function to Add Edge b/n vertices
	{
		myContainer[i].push_back(el);
	}

	void DFS(int source)	//Depth First Search
	{
		
		Visited[source] = 1;	//Source is root of tree we will make using DFS
		cout<<source<<"  ";

		vector<int>::iterator it;

	
			for (it = myContainer[source].begin(); it != myContainer[source].end(); ++it)
			{
				if (!Visited[*it])
				{
					DFS(*it);
				}
			}
		
	}
};

// Main Func
int main()

{
	//instance of Graph
	GRAPH g(11);

	//Adding Edges
	g.AddEdge(1, 2);
	g.AddEdge(1, 4);

	g.AddEdge(2, 1);
	g.AddEdge(2, 3);
	g.AddEdge(2, 8);
	g.AddEdge(2, 7);
	g.AddEdge(2, 5);

	g.AddEdge(3, 10);
	g.AddEdge(3, 9);
	g.AddEdge(3, 2);
	g.AddEdge(3, 4);

	g.AddEdge(4, 1);
	g.AddEdge(4, 3);

	g.AddEdge(5, 6);
	g.AddEdge(5, 7);
	g.AddEdge(5, 2);
	g.AddEdge(5, 8);

	g.AddEdge(6, 5);

	g.AddEdge(7, 2);
	g.AddEdge(7, 8);
	g.AddEdge(7, 5);

	g.AddEdge(8, 2);
	g.AddEdge(8, 5);
	g.AddEdge(8, 7);

    g.AddEdge(9, 3);
	g.AddEdge(10, 3);

	cout << "DFS Of Your Tree is with source as 1 is: ";
	g.DFS(1);

	return 0;
}